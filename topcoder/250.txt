#include <stdio.h>
#include <stdlib.h>

#define _USE_MATH_DEFINES

#include <math.h>
#include <limits.h>

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <iterator>
#include <numeric>
#include <functional>
#include <algorithm>
#include <utility>

class AlphabetPath {
public:
	typedef std::pair<int, int> position;
	static std::string doesItExist(std::vector<std::string> letterMaze) {
		return main(letterMaze) ? "YES" : "NO";
	}
	static bool main(std::vector<std::string> letterMaze) {
		position cur = findPos(letterMaze, 'A');
		for(char chr = 'B'; chr <= 'Z'; chr++) {
			const position next = findPos(letterMaze, chr);
			if(next.first == UINT_MAX || std::abs(next.first - cur.first) + std::abs(next.second - cur.second) > 1) {
				return false;
			}
			cur = next;
		}
		return true;
	}
	static position findPos(const std::vector<std::string> letterMaze, const char chr) {
		for(unsigned int i = 0; i < letterMaze.size(); i++) {
			const std::string::const_iterator it = std::find(letterMaze[i].begin(), letterMaze[i].end(), chr);
			if(it == letterMaze[i].end()) {
				continue;
			}
			return position(i, std::distance(letterMaze[i].begin(), it));
		}
		return position(INT_MAX, INT_MAX);
	}
};