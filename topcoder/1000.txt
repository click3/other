
#include <stdio.h>
#include <stdlib.h>

#define _USE_MATH_DEFINES

#include <math.h>
#include <limits.h>

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <iterator>
#include <numeric>
#include <functional>
#include <algorithm>
#include <utility>

unsigned int list[100][1024];
const unsigned int M = 1000000007;

class SmallBricks31 {
protected:
	int w;
	int h;
	unsigned int max_pos;
	unsigned int row_mask;
public:
	unsigned int countWays(int w, int h) {
		::memset(list, 0, sizeof(list));
		this->w = w;
		this->h = h;
		max_pos = w * h;
		const unsigned int parent_row = (1<<w)-1;
		row_mask = parent_row;
		return impl(0, parent_row);
	}
	unsigned int impl(unsigned int pos, unsigned int parent_row) {
		if(pos == max_pos) return 1;
		if(list[pos][parent_row] != 0) return list[pos][parent_row];

		unsigned int &result = list[pos][parent_row];
		result = impl(pos + 1, (parent_row << 1) & row_mask);
		if(((parent_row>>(w-1))&1) == 1) {
			result += impl(pos + 1, ((parent_row << 1) | 1) & row_mask);
			result %= M;
		}
		if(w-(pos%w) >= 2 && ((parent_row>>(w-2))&3) == 3) {
			result += impl(pos + 2, ((parent_row << 2) | 3) & row_mask);
			result %= M;
		}
		if(w-(pos%w) >= 3 && ((parent_row>>(w-3))&5) == 5) {
			result += impl(pos + 3, ((parent_row << 3) | 7) & row_mask);
			result %= M;
		}
		return result;
	}
};

int main() {
	SmallBricks31 a;
	for(unsigned int w = 10; w <= 10; w++) {
		for(unsigned int h = 10; h <= 10; h++) {
			printf("%d:%d = %d\n", w, h, a.countWays(w, h));
		}
	}
	return 0;
}
